import re 


async def extract_bigc_receipt_information(text):

    result = [] #ประกาศตัวเเปรสำหรับเก็บข้อมูลของใบเสร็จตาม pattern ที่กำหนด
    payment_amount: int = 0 #ประกาศตัวเเปรสำหรับเก็บ ยอดเงินชำระ

    text = text.split('\n') #เเบ่งบรรทัดตามการขึ้นบรรทัดใหม่ \n

    #กำหนดชื่อบริษัท
    result.append({
        "item1": "บริษัท บิ๊กซี ซูเปอร์เซ็นเตอร์ จำกัด (มหาชน)"
    })

    
    #กำหนด pattern สำหรับเก็บข้อมูล
    result.append({
        "item1": "จำนวน",
        "item2": "รหัสสินค้า",
        "item3": "รายการสินค้า",
        "item4": "หน่วยบรรจุ",
        "item5": "ราคาต่อหน่วย",
        "item6": "ส่วนลด บาท",
        "item7": "รหัสภาษี",
        "item8": "จำนวนเงิน (รวม VAT)"
    })
    
    for index in range(len(text)): #วนลูปตามความยาวของตัวเเปร text ที่มีชนิดเป็น List 
        number = 0 #ประกาศตัวเเปรสำหรับเก็บจำนวนของบรรทัดที่จะบวกไปหาข้อมูลที่เกินของรายการสินค้าในเเถวนั้นๆ
        over = "" #สำหรับเก็บข้อมูลที่เกินของรายการสินค้าในเเถวนั้นๆออกมา
        product_name = "" #ประกาศตัวเเปรสำหรับสร้างรายการสินค้าที่มีการ join ข้อมูลใน List

        if re.compile(r'^\d+.\d+\s+\d{13}').search(text[index]): #หาเเถวที่ต้องการ
            words = text[index].split() #เเบ่งข้อความตามการเว้นวรรค
            print(words)
            
            count = 1 #สำหรับนับจำนวนของบรรทัดที่จะบวกไปหาข้อมูลที่เกินของรายการสินค้าในเเถวนั้นๆ
            while True: 
                if text[index+count] == "": #ตรวจสอบว่าบรรทัดต่อๆไปของเเถวนั้นๆมีค่าว่างหรือไม่
                    count += 1 #ถ้ามีค่าว่างที่ให้ count บวกไปทีละ 1 เเล้ววนลูปไปเรื่อยๆจนกว่าจะเจอเเถวที่มีข้อมูล
                else:
                    number += count #ถ้าเจอเเถวมีข้อมูลก็ให้เก็บจำนวนของบรรทัดที่จะบวกไปหาข้อมูลที่เกินของรายการสินค้าในเเถวนั้นๆ เเละหยุดการทำงานของลูป
                    break

            if (not re.compile(r'^\d+.\d+\s+\d{13}').search(text[index+number])) and (not re.compile(r'ออกแทนใบกํากับภาษีอย่างย่อ\s+เลขที่\s+\d+').search(text[index+number])):
                over = text[index+number] #นำข้อมูลที่เกินของรายการสินค้าในเเถวนั้นๆออกมา
                product_name = " ".join(words[2:-3]) + over #นำข้อมูลที่เกินมาต่อเข้ากับรายการสินค้าของตัวมัน

            else: #กรณีที่ไม่มีข้อความเกินจนขึ้นบรรทัดใหม่
                print("กรณีที่ไม่มีข้อความเกินจนขึ้นบรรทัดใหม่")
                product_name = " ".join(words[2:-3]) #เพิ่มรายการสินค้า, การ join หมายความว่านำข้อมูลใน List มารวมกันเเละเเทนที่ช่องที่ต่อกันด้วย " " หรือจะใส่ "-"

            result.append({
                "item1": words[0], #เพิ่มจำนวน
                "item2": words[1], #เพิ่มรหัสสินค้า
                "item3": product_name, #เพิ่มรายการสินค้า
                "item4": "", #เนื่องจากใบเสร็จ big c ไม่มี column สำหรับข้อมูลหน่วยบรรจุ ดังนั้นจึงใส่ค่าว่าง
                "item5": words[-3], #เพิ่มราคาต่อหน่วย (รวม VAT), การใช้ตัวเลขติดลบในการเข้าถึงสมาชิกของ List จะเป็นการเข้าถึงสมาชิกจากท้ายสุดมา -3 หมายถึงสมาชิกตัวที่สามจากด้านท้ายสุดของ List
                "item6": words[-2], #เพิ่มส่วนลด บาท, -2 หมายถึงสมาชิกตัวที่ 2 จากด้านท้ายสุดของ List
                "item7": "", #เนื่องจากใบเสร็จ big c ไม่มี column สำหรับข้อมูล VAT CODE ดังนั้นจึงใส่ค่าว่าง
                "item8": words[-1] #เพิ่มจำนวนเงิน (รวม VAT), -1 หมายถึงสมาชิกตัวเเรกจากด้านท้ายสุดของ List
            })

            payment_amount += float(words[-1]) #ทำการหาผลรวมสำหรับ ยอดเงินชำระ
            
        elif re.compile(r'ออกแทนใบกํากับภาษีอย่างย่อ\s+เลขที่\s+\d+').search(text[index]): #\s หมายถึง whitespace, \s+ ต้องมี whitespace อย่างน้อยหนึ่งขึ้นไป
            print("หยุดการทำงานของ bigc " + text[index])

            break #ถ้าวนลูปจนถึงเเถวที่ไม่ต้องการ ทำการหยุดลูป

    
    #เพิ่มข้อมูล ยอดเงินชำระ
    result.append({
        "item1": "ยอดเงินชำระ",
        "item2": "",
        "item3": "",
        "item4": "",
        "item5": "",
        "item6": "",
        "item7": "",
        "item8": "{:.2f}".format(payment_amount)
    })

    return result
